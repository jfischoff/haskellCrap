{-# LANGUAGE TemplateHaskell,FlexibleInstances,MultiParamTypeClasses #-}
{-# OPTIONS_GHC -Wall -fno-warn-missing-fields #-}
import Data.DeriveTH
import Derive.TestInstances()
main :: IO ()
main = putStrLn "Type checking successful"
$(derives [makeEq] [])
$(derives [makeTypeable] [])
$(derives [makeArbitrary] [])
$(derives [makeArities] [])
$(derives [makeBinary] [])
$(derives [makeBounded] [])
$(derives [makeData] [])
$(derives [makeDefault] [])
$(derives [makeEnum] [])
$(derives [makeFold] [])
$(derives [makeFoldable] [])
$(derives [makeFrom] [])
$(derives [makeFunctor] [])
$(derives [makeHas] [])
$(derives [makeIs] [])
$(derives [makeMonoid] [])
$(derives [makeNFData] [])
$(derives [makeOrd] [])
$(derives [makeRead] [])
$(derives [makeSet] [])
$(derives [makeShow] [])
$(derives [makeTraversable] [])
$(derives [makeUpdate] [])
